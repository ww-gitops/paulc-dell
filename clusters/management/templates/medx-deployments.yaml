apiVersion: templates.weave.works/v1alpha2
kind: GitOpsTemplate
metadata:
  name: medx-deployments
  namespace: flux-system
  labels:
    weave.works/template-type: application
  annotations:
    templates.weave.works/profiles-enabled: "false"
    templates.weave.works/kustomizations-enabled: "false"
    templates.weave.works/credentials-enabled: "false"
    templates.weave.works/delimiters: "${{,}}"
spec:
  description: Template for creating new MedX application deployments.
  renderType: templating
  params:
    - name: CLUSTER_NAME
      description: Name of the cluster to add deployments.
    - name: AWS_REGION
      description: AWS region for environment.
      options:
        - ca-central-1
        - eu-central-1
        - eu-north-1
        - eu-west-1
        - eu-west-2
        - eu-west-3
        - sa-east-1
        - us-east-1
        - us-east-2
        - us-west-1
        - us-west-2
        - ap-southeast-4
    - name: SCANS_BUCKET
      description: Name of medx-be-api scans bucket.
    - name: LOGS_BUCKET
      description: Name of medx-be-api logs bucket.
    - name: LOGOS_BUCKET
      description: Name of medx-be-api logos bucket.
    - name: PUBLIC_DOMAIN
      description: Public Route53 domain for environment.
    - name: PRIVATE_DOMAIN
      description: Private Route53 domain for environment.
    - name: APP_DOMAIN
      description: App ingress domain for front end application.
    - name: DB_SECRET_NAME
      description: Name of AWS Secrets Manager secret that contains the db secrets.
    - name: SMILE_SECRET_NAME
      description: Name of AWS Secrets Manager secret that contains the smilecrd secrets.
    - name: MEDX_BE_API_SECRET_NAME
      description: Name of AWS Secrets Manager secret that contains the medx-be-api secrets.
    - name: MEDX_FE_APP_IMAGE_TAG
      description: Initial image tag to use for medx-fe-app deployment.
      default: latest
    - name: SMILECDR_IMAGE_TAG
      description: Initial image tag to use for smilecdr deployment.
      default: v2022.02.R09
    - name: MEDX_BE_API_IMAGE_TAG
      description: Initial image tag to use for medx-be-api deployment.
      default: latest
    - name: MEDX_BE_API_SA_ROLE_ARN
      description: IAM role arn to associate with medx-be-api service account.
    - name: REPLICAS
      description: Number of replicas to deploy of each application
      default: "1"
    - name: AUTOMATED_EMAILS_CRON_SCHEDULE
      description: Automated emails cron schedule
      default: "00 00 23 * * *"
    - name: MEDX_BE_API_NODE_ENV
      description: NODE_ENV value for medx-be-api
  resourcetemplates:
    #
    # Main MedX Flux config
    #
    - path: clusters/${{ .params.CLUSTER_NAME }}/flux/medx.yaml
      content:
        - apiVersion: kustomize.toolkit.fluxcd.io/v1beta2
          kind: Kustomization
          metadata:
            name: medx
            namespace: flux-system
          spec:
            dependsOn:
              - name: base-infrastructure
              - name: base-secrets
            interval: 10m0s
            retryInterval: 1m0s
            sourceRef:
              kind: GitRepository
              name: flux-system
              namespace: flux-system
            path: clusters/${{ .params.CLUSTER_NAME }}/medx
            prune: true
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/kustomization.yaml
      content:
        - apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization
          metadata:
            name: medx-kustomize
          resources:
            - config.yaml
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/config.yaml
      content:
        - apiVersion: v1
          kind: Namespace
          metadata:
            name: medx
        - apiVersion: external-secrets.io/v1beta1
          kind: ExternalSecret
          metadata:
            name: medx-docker-registry-creds
            namespace: medx
          spec:
            refreshInterval: 5m
            secretStoreRef:
              kind: ClusterSecretStore
              name: aws-secrets-manager
            target:
              name: medx-docker-registry-creds
              template:
                type: kubernetes.io/dockerconfigjson
                data:
                  .dockerconfigjson: "{{ .regcreds }}"
            data:
              - secretKey: regcreds
                remoteRef:
                  key: medx-docker-registry-creds
        - apiVersion: kustomize.toolkit.fluxcd.io/v1beta2
          kind: Kustomization
          metadata:
            name: medx-config-files
            namespace: medx
          spec:
            interval: 5m0s
            path: config-files
            prune: true
            wait: true
            sourceRef:
              kind: GitRepository
              name: flux-system
              namespace: flux-system
        - apiVersion: kustomize.toolkit.fluxcd.io/v1beta2
          kind: Kustomization
          metadata:
            name: smilecdr
            namespace: medx
          spec:
            interval: 5m0s
            path: clusters/${{ .params.CLUSTER_NAME }}/medx/smilecdr
            prune: true
            wait: true
            sourceRef:
              kind: GitRepository
              name: flux-system
              namespace: flux-system
        - apiVersion: kustomize.toolkit.fluxcd.io/v1beta2
          kind: Kustomization
          metadata:
            name: medx-be-api
            namespace: medx
          spec:
            dependsOn:
              - name: smilecdr
            interval: 5m0s
            path: clusters/${{ .params.CLUSTER_NAME }}/medx/medx-be-api
            prune: true
            wait: true
            sourceRef:
              kind: GitRepository
              name: flux-system
              namespace: flux-system
        - apiVersion: kustomize.toolkit.fluxcd.io/v1beta2
          kind: Kustomization
          metadata:
            name: medx-fe-app
            namespace: medx
          spec:
            interval: 5m0s
            path: clusters/${{ .params.CLUSTER_NAME }}/medx/medx-fe-app
            prune: true
            wait: true
            sourceRef:
              kind: GitRepository
              name: flux-system
              namespace: flux-system
    #
    # Initial medx-fe-app deployment setup
    #
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/medx-fe-app/deployment.yaml
      content:
        - apiVersion: apps/v1
          kind: Deployment
          metadata:
            labels:
              app: medx-fe-app
            name: medx-fe-app
            namespace: medx
          spec:
            replicas: ${{ .params.REPLICAS }}
            selector:
              matchLabels:
                app: medx-fe-app
            template:
              metadata:
                labels:
                  app: medx-fe-app
              spec:
                containers:
                  - image: medxdockeraccount/medx-fe:${{ .params.MEDX_FE_APP_IMAGE_TAG }}
                    name: medx-fe-app
                    env:
                      - name: API_HOST
                        value: api.${{ .params.PUBLIC_DOMAIN }}
                      - name: S3_BASE_URL
                        value: ${{ .params.LOGOS_BUCKET }}.s3.amazonaws.com
                    ports:
                      - containerPort: 8080
                        name: http
                        protocol: TCP
                    livenessProbe:
                      httpGet:
                        path: /
                        port: http
                    startupProbe:
                      httpGet:
                        path: /
                        port: http
                      failureThreshold: 10
                    readinessProbe:
                      httpGet:
                        path: /
                        port: http
                      periodSeconds: 5
                imagePullSecrets:
                  - name: medx-docker-registry-creds
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/medx-fe-app/ingress.yaml
      content:
        - apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: medx-fe-app
            namespace: medx
          spec:
            rules:
              - host: ${{ .params.APP_DOMAIN }}
                http:
                  paths:
                    - pathType: Prefix
                      path: /
                      backend:
                        service:
                          name: medx-fe-app
                          port:
                            name: http
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/medx-fe-app/service.yaml
      content:
        - apiVersion: v1
          kind: Service
          metadata:
            name: medx-fe-app
            namespace: medx
            labels:
              app: medx-fe-app
          spec:
            selector:
              app: medx-fe-app
            ports:
            - name: http
              port: 8080
              targetPort: http
              protocol: TCP
    #
    # Initial medx-be-api deployment setup
    #
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/medx-be-api/configmap.yaml
      content:
        - apiVersion: v1
          kind: ConfigMap
          metadata:
            name: medx-be-api-config
            namespace: medx
          data:
            SMILE_CDR_URL: smilecdr.medx.svc.cluster.local:8000
            DB_SERVER: db.${{ .params.PRIVATE_DOMAIN }}
            DB_NAME: MedX
            DB_PORT: "5656"
            NODE_ENV: ${{ .params.MEDX_BE_API_NODE_ENV }}
            S3_BUCKET: ${{ .params.SCANS_BUCKET }}
            S3_LOGS_BUCKET: ${{ .params.LOGS_BUCKET }}
            S3_LOGOS_BUCKET: ${{ .params.LOGOS_BUCKET }}
            BASE_LOGO_URL: https://${{ .params.LOGOS_BUCKET }}.s3.amazonaws.com
            REPORT_LOGO_URL: https://${{ .params.LOGOS_BUCKET }}.s3.amazonaws.com/finalSingleLogo.png
            TWILIO_FAX_NUMBER: "+12262712050"
            SMTP_HOST: email-smtp.${{ .params.AWS_REGION }}.amazonaws.com
            MEDX_RESULT_FAQ_LINK: https://medxhealth.com/resultsFAQ
            PATIENT_LOGIN_URL: /patient/login
            CONSENT_EMAIL: consent@medxhealth.com
            AUTOMATED_EMAILS_CRON_SCHEDULE: ${{ .params.AUTOMATED_EMAILS_CRON_SCHEDULE }}
            MFA_CODE_ONLY: "true"
            PROD_DOMAIN: https://${{ .params.APP_DOMAIN }}
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/medx-be-api/statefulset.yaml
      content:
        - apiVersion: apps/v1
          kind: StatefulSet
          metadata:
            labels:
              app: medx-be-api
            name: medx-be-api
            namespace: medx
          spec:
            replicas: ${{ .params.REPLICAS }}
            selector:
              matchLabels:
                app: medx-be-api
            template:
              metadata:
                labels:
                  app: medx-be-api
                annotations:
                  configmap.reloader.stakater.com/reload: "medx-be-api-config"
                  secret.reloader.stakater.com/reload: "medx-be-api-secrets,medx-be-api-db-creds,medx-be-api-smile-creds"
              spec:
                initContainers:
                  - image: postgres:alpine
                    name: verify-db
                    env:
                      - name: PGHOST
                        value: db.${{ .params.PRIVATE_DOMAIN }}
                      - name: PGPORT
                        value: "5656"
                      - name: PGUSER
                        valueFrom:
                          secretKeyRef:
                            name: medx-be-api-db-creds
                            key: DB_USER
                      - name: PGPASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: medx-be-api-db-creds
                            key: DB_PASSWORD
                    command: ["/bin/sh", "-c"]
                    args:
                      - |
                        if ! psql MedX -c '\q' 2>&1; then
                          echo "creating MedX database"
                          psql postgres -c 'create database "MedX";'
                        fi
                        table_count=$(psql MedX -t -c 'select count(*) from pg_stat_user_tables;')
                        if [ "$table_count" -eq  "0" ]; then
                          echo "applying MedX database schema"
                          psql postgres < /tmp/medx-db-schema/medx_db_schema.sql
                        fi
                        echo "Seeding users..."
                        psql MedX < /tmp/medx-db-schema/medx_user_seeding.sql
                        echo "User seeding complete"
                        echo "MedX database ready"
                    volumeMounts:
                      - name: medx-db-schema
                        mountPath: /tmp/medx-db-schema
                  - image: alpine
                    name: send-automated-emails
                    env:
                      - name: POD_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.name
                    command:
                      - /bin/sh
                      - -c
                    args:
                      - |
                        INDEX=${POD_NAME##*-}
                        if [ $INDEX -eq 0 ]; then
                          echo "export SEND_AUTOMATED_EMAILS=true" > /env/send-automated-emails
                        else
                          echo "" > /env/send-automated-emails
                        fi
                    volumeMounts:
                    - mountPath: /env
                      name: send-automated-emails
                containers:
                  - image: medxdockeraccount/medx-be-api:${{ .params.MEDX_BE_API_IMAGE_TAG }}
                    name: medx-be-api
                    envFrom:
                      - configMapRef:
                          name: medx-be-api-config
                      - secretRef:
                          name: medx-be-api-secrets
                      - secretRef:
                          name: medx-be-api-db-creds
                      - secretRef:
                          name: medx-be-api-smile-creds
                    command:
                      - /bin/sh
                      - -c
                      - . /env/send-automated-emails && npm start
                    ports:
                      - containerPort: 32770
                        name: https
                        protocol: TCP
                    livenessProbe:
                      httpGet:
                        path: /
                        port: https
                        scheme: HTTPS
                      failureThreshold: 15
                    startupProbe:
                      httpGet:
                        path: /
                        port: https
                        scheme: HTTPS
                      failureThreshold: 30
                    readinessProbe:
                      httpGet:
                        path: /
                        port: https
                        scheme: HTTPS
                      periodSeconds: 5
                    volumeMounts:
                      - mountPath: /env
                        name: send-automated-emails
                imagePullSecrets:
                  - name: medx-docker-registry-creds
                serviceAccountName: medx-be-api
                volumes:
                  - name: medx-db-schema
                    configMap:
                      name: medx-be-api-db-schema
                  - name: send-automated-emails
                    emptyDir: {}
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/medx-be-api/ingress.yaml
      content:
        - apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: medx-be-api
            namespace: medx
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          spec:
            rules:
              - host: api.${{ .params.PUBLIC_DOMAIN }}
                http:
                  paths:
                    - pathType: Prefix
                      path: /
                      backend:
                        service:
                          name: medx-be-api
                          port:
                            name: https
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/medx-be-api/secrets.yaml
      content:
        - apiVersion: external-secrets.io/v1beta1
          kind: ExternalSecret
          metadata:
            name: medx-be-api-secrets
            namespace: medx
          spec:
            refreshInterval: 5m
            secretStoreRef:
              kind: ClusterSecretStore
              name: aws-secrets-manager
            target:
              name: medx-be-api-secrets
            dataFrom:
              - extract:
                  key: ${{ .params.MEDX_BE_API_SECRET_NAME }}
        - apiVersion: external-secrets.io/v1beta1
          kind: ExternalSecret
          metadata:
            name: medx-be-api-db-creds
            namespace: medx
          spec:
            refreshInterval: 5m
            secretStoreRef:
              kind: ClusterSecretStore
              name: aws-secrets-manager
            target:
              name: medx-be-api-db-creds
              template:
                engineVersion: v2
                data:
                  DB_USER: "{{ .username }}"
                  DB_PASSWORD: "{{ .password }}"
            dataFrom:
              - extract:
                  key: ${{ .params.DB_SECRET_NAME }}
        - apiVersion: external-secrets.io/v1beta1
          kind: ExternalSecret
          metadata:
            name: medx-be-api-smile-creds
            namespace: medx
          spec:
            refreshInterval: 5m
            secretStoreRef:
              kind: ClusterSecretStore
              name: aws-secrets-manager
            target:
              name: medx-be-api-smile-creds
              template:
                engineVersion: v2
                data:
                  SMILECDR_USERNAME: "{{ .username }}"
                  SMILECDR_PASSWORD: "{{ .password }}"
            dataFrom:
              - extract:
                  key: ${{ .params.SMILE_SECRET_NAME }}
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/medx-be-api/service-account.yaml
      content:
        - apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: medx-be-api
            namespace: medx
            annotations:
              eks.amazonaws.com/role-arn: ${{ .params.MEDX_BE_API_SA_ROLE_ARN }}
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/medx-be-api/service.yaml
      content:
        - apiVersion: v1
          kind: Service
          metadata:
            name: medx-be-api
            namespace: medx
            labels:
              app: medx-be-api
          spec:
            selector:
              app: medx-be-api
            ports:
            - name: https
              port: 32770
              targetPort: https
              protocol: TCP
    #
    # Initial smilecdr deployment setup
    #
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/smilecdr/deployment.yaml
      content:
        - apiVersion: apps/v1
          kind: Deployment
          metadata:
            labels:
              app: smilecdr
            name: smilecdr
            namespace: medx
          spec:
            replicas: ${{ .params.REPLICAS }}
            selector:
              matchLabels:
                app: smilecdr
            template:
              metadata:
                labels:
                  app: smilecdr
                annotations:
                  secret.reloader.stakater.com/reload: "smilecdr-creds,smilecdr-db-creds"
              spec:
                initContainers:
                  - image: postgres:alpine
                    name: verify-db
                    env:
                      - name: PGHOST
                        value: db.${{ .params.PRIVATE_DOMAIN }}
                      - name: PGPORT
                        value: "5656"
                      - name: PGUSER
                        valueFrom:
                          secretKeyRef:
                            name: smilecdr-db-creds
                            key: DB_USER
                      - name: PGPASSWORD
                        valueFrom:
                          secretKeyRef:
                            name: smilecdr-db-creds
                            key: DB_PASSWORD
                    command: ["/bin/sh", "-c"]
                    args:
                      - |
                        if ! psql ClusterManager -c '\q' 2>&1; then
                          echo "creating ClusterManager database"
                          psql postgres -c 'create database "ClusterManager";'
                        fi
                        if ! psql FHIRStorage -c '\q' 2>&1; then
                          echo "creating FHIRStorage database"
                          psql postgres -c 'create database "FHIRStorage";'
                        fi
                        echo "ClusterManager and FHIRStorage databases ready"
                containers:
                  - image: medxdockeraccount/smilecdr:${{ .params.SMILECDR_IMAGE_TAG }}
                    name: smilecdr
                    env:
                      - name: DB_HOST
                        value: db.${{ .params.PRIVATE_DOMAIN }}
                      - name: DB_PORT
                        value: "5656"
                    envFrom:
                      - secretRef:
                          name: smilecdr-creds
                      - secretRef:
                          name: smilecdr-db-creds
                    ports:
                      - containerPort: 8000
                        name: fhir-api
                        protocol: TCP
                      - containerPort: 8001
                        name: fhir-web
                        protocol: TCP
                      - containerPort: 9000
                        name: admin-api
                        protocol: TCP
                      - containerPort: 9100
                        name: admin-web
                        protocol: TCP
                      - containerPort: 9200
                        name: smart-auth
                        protocol: TCP
                    volumeMounts:
                      - name: smilecdr-master-properties
                        mountPath: /home/smile/smilecdr/classes/cdr-config-Master.properties
                        subPath: cdr-config-Master.properties
                      - name: smilecdr-users
                        mountPath: /home/smile/smilecdr/classes/config_seeding/users.json
                        subPath: users.json
                    livenessProbe:
                      httpGet:
                        path: /
                        port: fhir-web
                    startupProbe:
                      httpGet:
                        path: /
                        port: fhir-web
                      failureThreshold: 30
                    readinessProbe:
                      httpGet:
                        path: /
                        port: fhir-web
                      periodSeconds: 5
                imagePullSecrets:
                  - name: medx-docker-registry-creds
                volumes:
                  - name: smilecdr-master-properties
                    configMap:
                      name: smilecdr-config
                      items:
                        - key: cdr-config-Master.properties
                          path: cdr-config-Master.properties
                  - name: smilecdr-users
                    configMap:
                      name: smilecdr-config
                      items:
                        - key: users.json
                          path: users.json
                terminationGracePeriodSeconds: 90
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/smilecdr/ingress.yaml
      content:
        - apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: smilecdr
            namespace: medx
          spec:
            rules:
              - host: smile.${{ .params.PUBLIC_DOMAIN }}
                http:
                  paths:
                    - pathType: Prefix
                      path: /
                      backend:
                        service:
                          name: smilecdr
                          port:
                            name: admin-web
              - host: fhir.${{ .params.PUBLIC_DOMAIN }}
                http:
                  paths:
                    - pathType: Prefix
                      path: /
                      backend:
                        service:
                          name: smilecdr
                          port:
                            name: fhir-web
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/smilecdr/secrets.yaml
      content:
        - apiVersion: external-secrets.io/v1beta1
          kind: ExternalSecret
          metadata:
            name: smilecdr-creds
            namespace: medx
          spec:
            refreshInterval: 5m
            secretStoreRef:
              kind: ClusterSecretStore
              name: aws-secrets-manager
            target:
              name: smilecdr-creds
              template:
                engineVersion: v2
                data:
                  SMILECDR_USERNAME: "{{ .username }}"
                  SMILECDR_PASSWORD: "{{ .password }}"
            dataFrom:
              - extract:
                  key: ${{ .params.SMILE_SECRET_NAME }}
        - apiVersion: external-secrets.io/v1beta1
          kind: ExternalSecret
          metadata:
            name: smilecdr-db-creds
            namespace: medx
          spec:
            refreshInterval: 5m
            secretStoreRef:
              kind: ClusterSecretStore
              name: aws-secrets-manager
            target:
              name: smilecdr-db-creds
              template:
                engineVersion: v2
                data:
                  DB_USER: "{{ .username }}"
                  DB_PASSWORD: "{{ .password }}"
            dataFrom:
              - extract:
                  key: ${{ .params.DB_SECRET_NAME }}
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/smilecdr/service.yaml
      content:
        - apiVersion: v1
          kind: Service
          metadata:
            name: smilecdr
            namespace: medx
            labels:
              app: smilecdr
          spec:
            selector:
              app: smilecdr
            ports:
              - name: fhir-api
                port: 8000
                targetPort: fhir-api
                protocol: TCP
              - name: fhir-web
                port: 8001
                targetPort: fhir-web
                protocol: TCP
              - name: admin-api
                port: 9000
                targetPort: admin-api
                protocol: TCP
              - name: admin-web
                port: 9100
                targetPort: admin-web
                protocol: TCP
              - name: smart-auth
                port: 9200
                targetPort: smart-auth
                protocol: TCP
    - path: clusters/${{ .params.CLUSTER_NAME }}/medx/smilecdr/configmap.yaml
      content:
        - apiVersion: v1
          kind: ConfigMap
          metadata:
            name: smilecdr-config
            namespace: medx
          data:
            cdr-config-Master.properties: |-
              ################################################################################
              # Node Configuration
              ################################################################################
              node.id                                                                                     =Master
              node.propertysource                                                                         =PROPERTIES

              ################################################################################
              # Cluster Manager Configuration
              ################################################################################
              module.clustermgr.type                                                                      =CLUSTER_MGR
              module.clustermgr.config.db.driver                                                          =POSTGRES_9_4
              module.clustermgr.config.db.url                                                             =jdbc:postgresql://#{env['DB_HOST']}:#{env['DB_PORT']}/ClusterManager
              module.clustermgr.config.db.hibernate.showsql                                               =false
              module.clustermgr.config.db.username                                                        =#{env['DB_USER']}
              module.clustermgr.config.db.password                                                        =#{env['DB_PASSWORD']}

              ################################################################################
              # Database Configuration
              ################################################################################
              module.persistence.type                                                                     =PERSISTENCE_DSTU3
              module.persistence.config.db.driver                                                         =POSTGRES_9_4
              module.persistence.config.db.url                                                            =jdbc:postgresql://#{env['DB_HOST']}:#{env['DB_PORT']}/FHIRStorage
              module.persistence.config.db.hibernate.showsql                                              =false
              module.persistence.config.db.username                                                       =#{env['DB_USER']}
              module.persistence.config.db.password                                                       =#{env['DB_PASSWORD']}
              module.persistence.config.db.hibernate_search.directory                                     =database/lucene_fhir_persistence
              module.persistence.config.db.hibernate_search.index.terminology                             =true
              module.persistence.config.dao_config.expire_search_results_after_minutes                    =60
              module.persistence.config.dao_config.allow_multiple_delete.enabled                          =false
              module.persistence.config.dao_config.allow_inline_match_url_references.enabled              =false
              module.persistence.config.dao_config.allow_external_references.enabled                      =false
              module.persistence.config.dao_config.enforce_referential_integrity_on_delete.enabled        =false
              module.persistence.config.dao_config.reuse_cached_results_timeout_millis                    =0
              module.persistence.config.page_size.default                                                 =99999999
              module.persistence.config.page_size.maximum                                                 =99999999
              module.persistence.config.searchcache.infinispan.protocol_version                           =PROTOCOL_VERSION_23

              ################################################################################
              # Subscription
              ################################################################################
              module.subscription.type                                                                    =SUBSCRIPTION_MATCHER_DSTU3
              module.subscription.requires.PERSISTENCE_DSTU3                                              =persistence

              ################################################################################
              # Local Storage Inbound Security
              ################################################################################
              module.local_security.type                                                                  =SECURITY_IN_LOCAL
              module.local_security.config.seed.users.file                                                =classpath:/config_seeding/users.json
              module.local_security.config.password_encoding_type                                         =BCRYPT_12_ROUND

              ################################################################################
              # ENDPOINT: FHIR Service
              ################################################################################
              module.fhir_endpoint.type                                                                   =ENDPOINT_FHIR_REST_DSTU3
              module.fhir_endpoint.requires.PERSISTENCE_DSTU3                                             =persistence
              module.fhir_endpoint.requires.SECURITY_IN_UP                                                =local_security
              module.fhir_endpoint.config.port                                                            =8000
              module.fhir_endpoint.config.threadpool.min                                                  =2
              module.fhir_endpoint.config.threadpool.max                                                  =10
              module.fhir_endpoint.config.browser_highlight.enabled                                       =true
              module.fhir_endpoint.config.cors.enable                                                     =true
              module.fhir_endpoint.config.default_encoding                                                =JSON
              module.fhir_endpoint.config.default_pretty_print                                            =true
              module.fhir_endpoint.config.base_url.fixed                                                  =http://localhost:8000
              module.fhir_endpoint.config.tls.enabled                                                     =false
              module.fhir_endpoint.config.anonymous.access.enabled                                        =true
              module.fhir_endpoint.config.security.http.basic.enabled                                     =true
              module.fhir_endpoint.config.request_validating.enabled                                      =false
              module.fhir_endpoint.config.request_validating.fail_on_severity                             =ERROR
              module.fhir_endpoint.config.request_validating.tags.enabled                                 =false
              module.fhir_endpoint.config.request_validating.response_headers.enabled                     =false
              module.fhir_endpoint.config.request_validating.require_explicit_profile_definition.enabled  =false

              ################################################################################
              # ENDPOINT: JSON Admin Services
              ################################################################################
              module.admin_json.type                                                                      =ADMIN_JSON
              module.admin_json.requires.SECURITY_IN_UP                                                   =local_security
              module.admin_json.config.port                                                               =9000
              module.admin_json.config.tls.enabled                                                        =false
              module.admin_json.config.anonymous.access.enabled                                           =true
              module.admin_json.config.security.http.basic.enabled                                        =true

              ################################################################################
              # ENDPOINT: Web Admin
              ################################################################################
              module.admin_web.type                                                                       =ADMIN_WEB
              module.admin_web.requires.SECURITY_IN_UP                                                    =local_security
              module.admin_web.config.port                                                                =9100
              module.admin_web.config.tls.enabled                                                         =false

              ################################################################################
              # ENDPOINT: FHIRWeb Console
              ################################################################################
              module.fhirweb_endpoint.type                                                                =ENDPOINT_FHIRWEB
              module.fhirweb_endpoint.requires.SECURITY_IN_UP                                             =local_security
              module.fhirweb_endpoint.requires.ENDPOINT_FHIR                                              =fhir_endpoint
              module.fhirweb_endpoint.config.port                                                         =8001
              module.fhirweb_endpoint.config.threadpool.min                                               =2
              module.fhirweb_endpoint.config.threadpool.max                                               =10
              module.fhirweb_endpoint.config.tls.enabled                                                  =false
              module.fhirweb_endpoint.config.anonymous.access.enabled                                     =false

              ################################################################################
              # SMART Security
              ################################################################################
              module.smart_auth.type                                                                      =SECURITY_OUT_SMART
              module.smart_auth.requires.CLUSTERMGR                                                       =clustermgr
              module.smart_auth.requires.SECURITY_IN_UP                                                   =local_security
              module.smart_auth.config.port                                                               =9200
              module.smart_auth.config.openid.signing.jwks_file                                           =classpath:/smilecdr-demo.jwks
              module.smart_auth.config.issuer.url                                                         =https://localhost:9200
              module.smart_auth.config.tls.enabled                                                        =false

              ################################################################################
              # SMART Demo Apps
              ################################################################################
              module.smart_app_demo_host.type                                                             =SMART_APPS_HOST
              module.smart_app_demo_host.requires.CLUSTERMGR                                              =clustermgr
              module.smart_app_demo_host.config.port                                                      =9201
            users.json: |-
              {
                "users": [
                  {
                    "username": "#{env['SMILECDR_USERNAME']}",
                    "password": "#{env['SMILECDR_PASSWORD']}",
                    "familyName": "#{env['SMILECDR_USERNAME']}",
                    "givenName": "#{env['SMILECDR_USERNAME']}",
                    "authorities": [
                      {
                        "permission": "ROLE_SUPERUSER"
                      },
                      {
                        "permission": "ROLE_FHIR_CLIENT_SUPERUSER"
                      }
                    ]
                  }
                ]
              }
